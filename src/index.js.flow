/* @flow */

type ClassDecorator = <T: Function>(target: T) => T;
type PropertyDecorator = (target: Object, propertyKey: string) => void;
type MethodDecorator = (
  target: Object,
  key: string,
  descriptor: Object
) => Object | void;
type Token = Function | Object | string;
type Definition = Function | [Function] | [Token, Function];
type Provider = {
  /**
   * Register dependency injection bindings in scope of decorated class
   * @param definitions Dependency injection configuration
   * @returns Decorated constructor
   */
  register(...definitions: Definition[]): void;
};
type ProviderMixin<T> = T &
  Provider & {
    contextType: typeof InjectorContext;
    WrappedComponent: T;
  };

declare export var InjectorContext: any;

/**
 * Decorator or HOC that register dependency injection bindings
 * in scope of decorated class
 * @param definitions Dependency injection configuration
 * @returns Decorator or HOC
 */
declare export function provider(
  ...definitions: Definition[]
): <T: Function>(target: T) => ProviderMixin<T>;

/**
 * Property decorator that resolves a class instance
 * which registered by some Provider in hierarchy.
 * Instance is cached in Provider that registers it's class.
 * @param token Dependency injection token
 * @returns Property decorator
 */
declare export function inject(token?: Token): PropertyDecorator;
/**
 * Property decorator that resolves a class instance
 * which registered by some Provider in hierarchy.
 * Instance is cached in Provider that registers it's class.
 */
declare export function inject(target: Object, key: string): void;
/**
 * Create a class instance that registered by some Provider in hierarchy.
 * Instance is cached in Provider that registers it's class.
 * @param target The object in which we inject class instance
 * @param token Dependency injection token
 * @returns Resolved class instance
 */
declare export function inject<T>(
  target: Object,
  token: Class<T> | Token
): T;

/**
 * Bind dependency to specified class.
 * @param cosntructor Constructor
 * @returns Dependency resolver
 */
declare export function toClass(cosntructor: Class<any>): Function;
